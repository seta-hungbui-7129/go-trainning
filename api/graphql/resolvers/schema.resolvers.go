package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"seta-training/api/graphql/generated"
	"seta-training/api/graphql/model"
	"seta-training/internal/models"
	"seta-training/internal/services"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*models.User, error) {
	serviceInput := &services.CreateUserInput{
		Username: input.Username,
		Email:    input.Email,
		Password: input.Password,
		Role:     models.UserRole(input.Role),
	}

	return r.UserService.CreateUser(serviceInput)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.LoginResponse, error) {
	serviceInput := &services.LoginInput{
		Email:    input.Email,
		Password: input.Password,
	}

	response, err := r.UserService.Login(serviceInput)
	if err != nil {
		return nil, err
	}

	return &model.LoginResponse{
		User:  response.User,
		Token: response.Token,
	}, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	// For JWT-based auth, logout is handled client-side by removing the token
	// In a more complex setup, you might maintain a blacklist of tokens
	return true, nil
}

// FetchUsers is the resolver for the fetchUsers field.
func (r *queryResolver) FetchUsers(ctx context.Context) ([]*models.User, error) {
	users, err := r.UserService.GetAllUsers()
	if err != nil {
		return nil, err
	}

	// Convert []models.User to []*models.User
	result := make([]*models.User, len(users))
	for i := range users {
		result[i] = &users[i]
	}

	return result, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
	// For now, return nil - this would need proper GraphQL auth middleware
	// In a real implementation, you'd extract user info from GraphQL context
	return nil, fmt.Errorf("authentication not implemented for GraphQL queries yet")
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *models.User) (string, error) {
	return obj.ID.String(), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *models.User) (string, error) {
	return obj.CreatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *userResolver) UpdatedAt(ctx context.Context, obj *models.User) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
